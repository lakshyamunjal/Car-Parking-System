package finalProject;

import java.awt.event.WindowEvent;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.Iterator;
import javax.swing.table.DefaultTableModel;
import org.joda.time.DateTime;
import org.joda.time.Hours;

public class DisplayCarStatus extends javax.swing.JFrame {

    public DisplayCarStatus() {
        initComponents();
        setTodaysDateAndTime();
        hoursList.addItem("Select:");
        hoursList.addItem(hours[0]);
        hoursList.addItem(hours[1]);
        hoursList.addItem(hours[2]);
        hoursList.addItem(hours[3]);

        this.setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        hoursList = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        submitButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        dateToday = new javax.swing.JLabel();
        timeToday = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        orderBy = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        parkingStatus = new javax.swing.JTable();
        backButton = new javax.swing.JButton();
        quitButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Parking Lot Status");
        setBounds(new java.awt.Rectangle(100, 200, 350, 350));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setText("Hours:");

        submitButton.setText("Display");
        submitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitButtonActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel2.setText("Date:");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel3.setText("Time:");

        orderBy.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Default", "Slot Number", "Car Number", "Entry Date", "Entry Time", "Hours Passed" }));
        orderBy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                orderByActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel4.setText("Order By:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel4))
                .addGap(42, 42, 42)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(orderBy, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(hoursList, 0, 184, Short.MAX_VALUE))
                .addGap(65, 65, 65)
                .addComponent(submitButton)
                .addGap(66, 66, 66)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(dateToday))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(timeToday)))
                .addGap(25, 25, 25))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(hoursList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(dateToday))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(timeToday)
                .addContainerGap(43, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(orderBy, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(submitButton)
                    .addComponent(jLabel3))
                .addContainerGap())
        );

        parkingStatus.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Slot Number", "Car Number", "Entry Date", "Entry Time", "Hours Passed"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        parkingStatus.setColumnSelectionAllowed(true);
        parkingStatus.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(parkingStatus);
        parkingStatus.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        if (parkingStatus.getColumnModel().getColumnCount() > 0) {
            parkingStatus.getColumnModel().getColumn(0).setResizable(false);
            parkingStatus.getColumnModel().getColumn(1).setResizable(false);
            parkingStatus.getColumnModel().getColumn(1).setPreferredWidth(70);
            parkingStatus.getColumnModel().getColumn(2).setResizable(false);
            parkingStatus.getColumnModel().getColumn(3).setResizable(false);
            parkingStatus.getColumnModel().getColumn(4).setResizable(false);
        }

        backButton.setText("Go Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        quitButton.setText("Quit");
        quitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 666, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(backButton)
                .addGap(49, 49, 49)
                .addComponent(quitButton)
                .addGap(28, 28, 28))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 299, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(backButton)
                    .addComponent(quitButton))
                .addGap(17, 17, 17))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void submitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitButtonActionPerformed
        // TODO add your handling code here:
        int index = hoursList.getSelectedIndex();
        int orderByIndex = orderBy.getSelectedIndex();

        try {
            getRecords(index, orderByIndex);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_submitButtonActionPerformed

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
        new MainFrame();
    }//GEN-LAST:event_backButtonActionPerformed

    private void quitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitButtonActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
        this.dispose();
        this.dispatchEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));
    }//GEN-LAST:event_quitButtonActionPerformed

    private void orderByActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_orderByActionPerformed
        // TODO add your handling code here:


    }//GEN-LAST:event_orderByActionPerformed

    private void getRecords(int index, int orderByIndex) throws Exception {

        switch (index) {
            case 1:
                results = fetchDataFromDatabase(12);
                break;
            case 2:
                results = fetchDataFromDatabase(24);
                break;
            case 3:
                results = fetchDataFromDatabase(36);
                break;
            case 4:
                results = fetchDataFromDatabase(48);
                break;
        }
        String[] columnNames = {"Slot Number", "Car number", "Entry date", "Entry time", "Hours Passed"};

        // rows fectched from database are added to DefaultTableModel
        DefaultTableModel defaultModel = new DefaultTableModel() {
            // disbale changing the cells of table
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };

        // set the column names
        defaultModel.setColumnIdentifiers(columnNames);

        ArrayList<CarComparator> list = new ArrayList<>();

        while (results.next()) {
            String slotNumber = String.valueOf(results.getInt(1));
            String plateNumber = results.getString("plate_number");
            String dateTime = results.getString("entry_dateTime");
            //yyyy-MM-dd HH:mm:ss.ms
            String[] array = dateTime.split(" ");
            String entryDate = getFormattedDate(array[0]);      // dd-mm-yyyy
            String entryTime = array[1].substring(0, array[1].length() - 2);       // substring is used to discard the millisecs at the end

            String hoursPassed = getHoursPassed(dateTime);

            list.add(new CarComparator(slotNumber, plateNumber, entryDate, entryTime, hoursPassed));
            //String[] values = {slotNumber, plateNumber, entryDate, entryTime, hoursPassed};

        }

        switch (orderByIndex) {
            case 0:
            case 1:
                Collections.sort(list, new SlotNumberComparator());
                break;
            case 2:
                Collections.sort(list, new PlateNumberComparator());
                break;
            case 3:
                Collections.sort(list, new EntryDateComparator());
                break;
            case 4:
                Collections.sort(list, new EntryTimeComparator());
                break;
            case 5:
                Collections.sort(list, new HoursPassedComparator());
                break;
        }

        Iterator<CarComparator> iterator = list.iterator();
        
        while (iterator.hasNext()) {
            CarComparator obj = iterator.next();
            String[] values = {obj.getSlotNumber(), obj.getPlateNumber(), obj.getEntryDate(), obj.getEntryTime(), obj.getHoursPassed()};
            defaultModel.addRow(values);
        }

        parkingStatus.setModel(defaultModel);

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backButton;
    private javax.swing.JLabel dateToday;
    private javax.swing.JComboBox hoursList;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox orderBy;
    private javax.swing.JTable parkingStatus;
    private javax.swing.JButton quitButton;
    private javax.swing.JButton submitButton;
    private javax.swing.JLabel timeToday;
    // End of variables declaration//GEN-END:variables

    private String[] hours = {"Upto 12 hours", "Upto 24 hours", "Upto 36 hours", "Upto 48 hours"};
    private static ResultSet results = null;

    private ResultSet fetchDataFromDatabase(int hours) throws SQLException {
        Connection conn = DatabaseConnection.newInstance();
        String query = "{CALL select_record(?)}";
        CallableStatement stmt = conn.prepareCall(query);
        stmt.setInt(1, hours);
        ResultSet rs = null;
        rs = stmt.executeQuery();
        //System.out.println("Result set: " + rs + ", Hours: " + hours);
        return rs;
    }

    private String getCurrentDateTime() {
        SimpleDateFormat formatter = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss");
        return formatter.format(new Date());
    }

    // getting ParseException here
    private String getHoursPassed(String dateTime) {
        SimpleDateFormat formatter = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss");

        // cannot use date time read from database directly, it gives incorrect result
        String dateTimeFromDatabase = formatDateTimeFromDB(dateTime);

        Date d1 = null, d2 = null;
        try {
            d1 = formatter.parse(dateTimeFromDatabase);
            d2 = formatter.parse(getCurrentDateTime());
        } catch (ParseException ex) {
            ex.printStackTrace();
        }

        DateTime dt1 = new DateTime(d1);
        DateTime dt2 = new DateTime(d2);

        return String.valueOf(Hours.hoursBetween(dt1, dt2).getHours());

    }

    private String getFormattedDate(String date) {
        // changed here
        String newDate = date.substring(8, 10) + '-';       // dd
        newDate += date.substring(5, 7) + '-';              // mm
        newDate += date.substring(0, 4);                    // yyyy
        return newDate;
    }

    // continuously update the date and time labels
    private void setTodaysDateAndTime() {
        Thread thread = new Thread(new Runnable() {
            public void run() {
                while (true) {
                    SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy");
                    SimpleDateFormat timeFormat = new SimpleDateFormat("HH:mm:ss");

                    dateToday.setText(dateFormat.format(new Date()));
                    timeToday.setText(timeFormat.format(new Date()));
                }
            }
        });
        thread.start();
    }

    private String formatDateTimeFromDB(String dateTime) {
        String newDate = dateTime.substring(8, 10) + '-';   // date
        newDate += dateTime.substring(5, 7) + '-';          // month
        newDate += dateTime.substring(0, 4) + ' ';               // year
        newDate += dateTime.substring(11, 21);      // hh:mm:ss

        return newDate;
    }
}
